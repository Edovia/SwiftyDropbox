
/* Autogenerated. Do not edit. */

import Foundation
/**
    Datatypes and serializers for the auth namespace
*/
public class Auth {
    /**
        Errors occurred during authentication.
    */
    public enum AuthError: CustomStringConvertible {
        /**
            The access token is invalid.
        */
        case invalidAccessToken
        /**
            The user specified in 'Dropbox-API-Select-User' is no longer on the team.
        */
        case invalidSelectUser
        /**
            An unspecified error.
        */
        case other
        public var description : String {
            return "\(prepareJSONForSerialization(AuthErrorSerializer().serialize(self)))"
        }
    }
    public class AuthErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(_ value: AuthError) -> JSON {
            switch value {
                case .invalidAccessToken:
                    var d = [String : JSON]()
                    d[".tag"] = .str("invalid_access_token")
                    return .dictionary(d)
                case .invalidSelectUser:
                    var d = [String : JSON]()
                    d[".tag"] = .str("invalid_select_user")
                    return .dictionary(d)
                case .other:
                    var d = [String : JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        public func deserialize(_ json: JSON) -> AuthError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "invalid_access_token":
                            return AuthError.invalidAccessToken
                        case "invalid_select_user":
                            return AuthError.invalidSelectUser
                        case "other":
                            return AuthError.other
                        default:
                            return AuthError.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }
}
